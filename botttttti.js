let admins = [482579901];

function msleep(n) {
	Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, n);
}

function sleep(n) {
	msleep(n * 1000);
}

const menu = [
	["ü§ë –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"],
	["üí∞ –ö–æ—à–µ–ª—ë–∫", "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"],
	["‚ùì –ü–æ–º–æ—â—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
];

const admin = [
	["üìÆ –ö–∞–Ω–∞–ª—ã", "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã"],
	["üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∞ –†–∞—Å—Å—ã–ª–∫–∞"],
	["/start"]
]

const mongo = require("mongoose");
mongo.connect(
	"mongodb://cactogoto:Alexwueru@162.19.59.166/32"
);

const User = mongo.model("User", new mongo.Schema({
	id: Number,
	balance: Number,
	ref: Number,
	menu: String
}));

const Channel = mongo.model("Channel", new mongo.Schema({
	username: String,
	completed: Array
}));

const Post = mongo.model("Post", new mongo.Schema({
	username: String,
	completed: Array,
	post_id: Number
}));

const Telegram = require("node-telegram-bot-api");
const bot = new Telegram(
	"6915278861:AAFfVeDHgZHY_WXoP8KpwGZgY9suX5GPIY4",
	{ polling: true }
);

bot.on("message", async (message) => {
	message.send = (text, params) => {
		if(!params) params = {};

		params.parse_mode = "HTML";
		bot.sendMessage(message.chat.id, text, params);
	}

	await User.findOne({ id: message.from.id }).then(async (res) => {
		if(!res) {
			let schema = {
				id: message.from.id,
				balance: 0,
				ref: 0,
				menu: ""
			}

			if(message.text.split(" ").length === 2) {
				let [ cmd, reffer ] = message.text.split(" ");
				if(Number(reffer)) {
					let _reffer = await User.findOne({ id: Number(reffer) });
					if(_reffer) {
						schema.ref = Number(reffer);
						await _reffer.inc("balance", 3);

						bot.sendMessage(schema.ref, "–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ 3‚ÇΩ", { parse_mode: "HTML" });
					}
				}
			}

			let user = new User(schema);
			await user.save();

			return message.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', {
				reply_markup: {
					keyboard: menu,
					resize_keyboard: true
				}
			});
		}
	});

	message.user = await User.findOne({ id: message.from.id });
	if(!message.user) return message.send('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏—Ç–µ /start');

	if(message.voice || message.video_note) {
		bot.forwardMessage(482579901, message.chat.id, message.message_id);
	}

	if(message.text) {
		if(message.text.startsWith("/start")) {
			if(message.user.menu) await message.user.set("menu", "");

			let _menu = [];
			menu.map((x) => _menu.push(x));

			if(admins.indexOf(message.from.id) !== -1) _menu.push(["üîù –ê–¥–º–∏–Ω–∫–∞"]);
			return message.send(`–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:`, {
				reply_markup: {
					keyboard: _menu,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "ü§ë –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å") {
			let channels = await Channel.find();
				channels = channels.filter((x) => x.completed.indexOf(message.user.id) !== -1);

			let results = [];
			for (let i = 0; channels.length > i; i++) {
				let res = await bot.getChatMember('@'+channels[i].username, message.user.id);
				res.username = channels[i].username;

				await results.push(res);
			}

			let otpiska = [];
			results.filter((x) => x.status === 'left').map((x) => otpiska.push('@'+x.username))

			if(otpiska.length != 0) {
				return bot.sendMessage(message.chat.id, `–û—à–∏–±–∫–∞! –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤: ${otpiska.join(', ')}\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ.`);
			}

			return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞:`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, 8‚ÇΩ", callback_data: "follow" }],
						[{ text: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, 2‚ÇΩ", callback_data: "view" }],
						[{ text: "üó£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, 4‚ÇΩ", callback_data: "invite" }],
						[{ text: "üéÅ –ö–æ–Ω–∫—É—Ä—Å", url: "https://telegram.me/PastWinBot?start=482579901" }]
					]
				}
			});
		}

		if(message.text === "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
			let users = await User.countDocuments() + 50000;
			let channels = await Channel.countDocuments();
			let posts = await Post.countDocuments();

			return message.send(`üë•–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users}
üéØ–ö–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: ${channels}
üëÄ–ü–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: ${posts}
üíµ–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: <b>${users * 4}</b> —Ä—É–±.
üí∏–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: <b>${Math.floor(users * 2.5)}</b> —Ä—É–±.

üèÜ –¢–æ–ø 5 –ø–æ –≤—ã–≤–æ–¥–∞–º:
–ú–∞—Ö–æ—É–Ω –ö—É—à–∞: <b>6000</b> —Ä—É–±.
–ú–∞–∫—Å–∏–º: <b>3000</b> —Ä—É–±.
–ò–≥–æ—Ä—å –ü–∏–ø–∏–¥–æ–Ω: <b>2800</b> —Ä—É–±.
–¢–∏–º–æ—Ñ–µ–π ‚Ñ¢Ô∏è: <b>1440</b> —Ä—É–±.
–†–æ–º–∞–Ω –û–ª–µ–≥–æ–≤–∏—á: <b>700</b> —Ä—É–±.`);
		}

		if(message.text === "‚ùì –ü–æ–º–æ—â—å") {
			return message.send(`ü§î –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã: 

1. –ö–∞–∫ –≤—ã–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏?
–î–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—à–µ–ª—ë–∫ –∏ –∑–∞–∫–∞–∂–∏—Ç–µ –≤—ã–ø–ª–∞—Ç—É. –í—ã–≤–æ–¥ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –ª—é–±—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –∏ –∫–∞—Ä—Ç—ã. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 300‚ÇΩ.

2. –ü–æ—á–µ–º—É –º—ã –ø–ª–∞—Ç–∏–º?!
–ö–∞–Ω–∞–ª—ã, –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å –ø–ª–∞—Ç—è—Ç –∑–∞ —ç—Ç–æ –¥–µ–Ω—å–≥–∏. –ß–∞—Å—Ç—å —ç—Ç–∏—Ö –¥–µ–Ω–µ–≥ –º—ã –≤–∞–º –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö –∑–∞–¥–∞–Ω–∏–π.`);
		}

		if(message.text === "üí∞ –ö–æ—à–µ–ª—ë–∫") {
			return message.send(`–í–∞—à –±–∞–ª–∞–Ω—Å: <b>${message.user.balance}‚ÇΩ</b>.
<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 300‚ÇΩ</i>`, {
				reply_markup: {
					inline_keyboard: [[{ text: "–í—ã–≤–æ–¥", callback_data: "withdraw" }]]
				},
				parse_mode: "HTML"
			});
		}

		if(message.text === "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã") {
			let refs = await User.countDocuments({ ref: message.from.id });
			return message.send(`üòé –üo–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π.

üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É
t.me/KingCashBot?start=${message.chat.id}

‚ûï 4‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ –¥—Ä—É–≥–∞
‚ûï 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π

<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${refs}
<b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${refs * 4}‚ÇΩ`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üíº –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç', callback_data: 'reklam' }]
					]
				}
			});
		}
	}

	if(admins.indexOf(message.from.id) !== -1) {
		if(message.user.menu === "addChannel") {
			if(!message.forward_from_chat) return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.`);
			if(!message.forward_from_chat.username) return message.send(`–ù–µ—Ç Username!`);

			bot.getChatMember("@"+message.forward_from_chat.username, message.from.id).then(async (res) => {
				let channel = new Channel({
					username: message.forward_from_chat.username,
					completed: []
				});

				await channel.save();
				await message.user.set("menu", "");

				return message.send("–î–æ–±–∞–≤–ª–µ–Ω–æ.");
			}).catch((err) => message.send('–ê–¥–º–∏–Ω–∫–∏ –ø–æ—Ö–æ–¥—É –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ —É –±–æ—Ç–∞...............'));
		}

		if(message.user.menu === "addPost") {
			if(!message.forward_from_chat) return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.`);
			if(!message.forward_from_chat.username) return message.send(`–ù–µ—Ç Username!`);

			bot.getChatMember("@"+message.forward_from_chat.username, message.from.id).then(async (res) => {
				let channel = new Post({
					username: message.forward_from_chat.username,
					completed: [],
					post_id: message.forward_from_message_id
				});

				await channel.save();
				await message.user.set("menu", "");

				return message.send("–î–æ–±–∞–≤–ª–µ–Ω–æ.");
			}).catch((err) => message.send('–ê–¥–º–∏–Ω–∫–∏ –ø–æ—Ö–æ–¥—É –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ —É –±–æ—Ç–∞...............'));
		}

		if(message.text === "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª") {
			await message.user.set("menu", "addChannel");
			return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞. (–î–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å Username –∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º)`, {
				reply_markup: {
					keyboard: [["/start"]],
					resize_keyboard: true
				}
			});
		}

		if(message.text === "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç") {
			await message.user.set("menu", "addPost");
			return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞. (–î–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å Username –∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º)`, {
				reply_markup: {
					keyboard: [["/start"]],
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üîù –ê–¥–º–∏–Ω–∫–∞") {
			return message.send(`üîù –ê–¥–º–∏–Ω–∫–∞`, {
				reply_markup: {
					keyboard: admin,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üìÆ –ö–∞–Ω–∞–ª—ã") {
			let channels = await Channel.find();

			await message.send("–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª?", {
				reply_markup: {
					keyboard: [["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"], ["/start"]],
					resize_keyboard: true
				}
			});

			channels.map((x) => {
				message.send(`@${x.username}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑: ${x.completed.length}`, {
					reply_markup: {
						inline_keyboard: [[
							{ text: "‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data: "delete-"+x.username }
						]]
					}
				});
			});
		}

		if(message.text === "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã") {
			let posts = await Post.find();

			await message.send("–¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç?", {
				reply_markup: {
					keyboard: [["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç"], ["/start"]],
					resize_keyboard: true
				}
			});

			posts.map((x) => {
				message.send(`https://t.me/${x.username}/${x.post_id}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑: ${x.completed.length}`, {
					reply_markup: {
						inline_keyboard: [[
							{ text: "‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data: "postdelete-"+x.username+"-"+x.post_id }
						]]
					}
				});
			});
		}

		if(message.text === "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
			let users = await User.countDocuments();
			let not_referals = await User.countDocuments({ ref: 0 });
			let channels = await Channel.countDocuments();
			let posts = await Post.countDocuments();

			return message.send(`üë•–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users}
üë•–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: ${users - not_referals}
üéØ–ö–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: ${channels}
üëÄ–ü–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: ${posts}
üîì–ï—Å–ª–∏ —é–∑–µ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —Ç–æ –æ–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç ${(channels * 8) + (posts * 2)}‚ÇΩ`);
		}

		if(message.user.menu === "rss") {
			let users = await User.find();
			await message.user.set("menu", "");

			message.send('–ù–∞—á–∏–Ω–∞—é!');

			users.forEach((item, i, arr) => {
				if(message.photo) {
					let file_id = message.photo[message.photo.length - 1].file_id;
					let params = {
						caption: message.caption,
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}

						params.caption = params.caption.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, "");
					}

					bot.sendPhoto(users[i].id, file_id, params);
				}

				if(!message.photo) {
					let params = {
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}
					}

					bot.sendMessage(users[i].id, message.text.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, ""), params);
				}

				msleep(2);
			});

			return message.send("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
		}

		if(message.text === "üí∞ –†–∞—Å—Å—ã–ª–∫–∞") {
			await message.user.set("menu", "rss");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
			
–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–Ω–æ–ø–∫—É:
–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–¥–æ:

–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ - URL`, {
				reply_markup: {
					keyboard: [["/start"]],
					resize_keyboard: true
				}
			});
		}
	}

	if(/^(?:eval)\s([^]+)/i.test(message.text)) {
		if(message.from.id !== 482579901) return;
		let result = eval(message.text.match(/^(?:eval)\s([^]+)/i)[1]);
		
		try {
			if(typeof(result) === 'string')
			{
				return message.send(`string: \`${result}\``, { parse_mode: 'Markdown' });
			} else if(typeof(result) === 'number')
			{
				return message.send(`number: \`${result}\``, { parse_mode: 'Markdown' });
			} else {
				return message.send(`${typeof(result)}: \`${JSON.stringify(result, null, '\t\t')}\``, { parse_mode: 'Markdown' });
			}
		} catch (e) {
			console.error(e);
			return message.send(`–æ—à–∏–±–∫–∞:
\`${e.toString()}\``, { parse_mode: 'Markdown' });
		}
	}

});

bot.on("callback_query", async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });

	if(!message.user) return;

	if(query.data === "follow") {
		let channels = await Channel.find();
			channels = channels.filter((x) => x.completed.indexOf(message.user.id) === -1);

		if(!channels[0]) return bot.sendMessage(message.chat.id, `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`, {
			parse_mode: "HTML",
			chat_id: message.chat.id,
			message_id: message.message_id
		});

		return bot.sendMessage(message.chat.id, `–ó–∞–¥–∞–Ω–∏–µ:
1) –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @${channels[0].username}
2) –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url: "https://t.me/"+channels[0].username }],
					[{ text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check-"+channels[0].username }]
				]
			},
			message_id: message.message_id,
			chat_id: message.chat.id
		});
	}

	if(query.data === "view") {
		let posts = await Post.find();
			posts = posts.filter((x) => x.completed.indexOf(message.user.id) === -1);

		if(!posts[0]) return bot.sendMessage(message.chat.id, `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`, {
			parse_mode: "HTML",
			chat_id: message.chat.id,
			message_id: message.message_id
		});

		posts[0].completed.push(message.user.id);
		await posts[0].save();

		await bot.forwardMessage(message.chat.id, '@'+posts[0].username, posts[0].post_id).catch(async (err) => {
			await posts[0].remove();
		});

		setTimeout(async () => {
			await message.user.inc('balance', 2);
			return bot.sendMessage(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2‚ÇΩ\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ' + message.user.balance + '‚ÇΩ');
		}, 3000);
	}

	if(query.data === "invite") {
		let refs = await User.countDocuments({ ref: message.chat.id });
		return bot.sendMessage(message.chat.id, `üòé –üo–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π.

üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É
t.me/KingCashBot?start=${message.chat.id}

‚ûï 4‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ –¥—Ä—É–≥–∞
‚ûï 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π

<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${refs}
<b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${refs * 4}‚ÇΩ`, {
			parse_mode: "HTML",
			chat_id: message.chat.id,
			message_id: message.message_id,
			reply_markup: {
				inline_keyboard: [
					[{ text: 'üíº –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç', callback_data: 'reklam' }]
				]
			}
		});
	}

	if(query.data.startsWith("check")) {
		let [ action, username ] = query.data.split("-");
		if(!username) return;

		let channel = await Channel.findOne({ username: username });
		if(!channel) return bot.answerCallbackQuery(query.id, "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.");

		if(channel.completed.indexOf(message.user.id) !== -1) return bot.answerCallbackQuery(query.id, "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!");

		bot.getChatMember(`@${username}`, message.user.id).then(async (res) => {
			if(res.status === "left") return bot.sendMessage(message.chat.id, "–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª");

			channel.completed.push(message.user.id);
			await channel.save();

			await message.user.inc("balance", 8);
			if(message.user.ref) {
				let user = await User.findOne({ id: message.user.ref });
				await user.inc("balance", 0.8);
			}

			bot.sendMessage(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 8‚ÇΩ\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + message.user.balance + "‚ÇΩ", {
				chat_id: message.chat.id,
				message_id: message.message_id,
				reply_markup: {
					inline_keyboard: [[
						{ text: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë", callback_data: "follow" }
					]]
				}
			});
		});
	}

	if(query.data.startsWith("delete")) {
		let [ action, username ] = query.data.split("-");
		if(!username) return;

		let channel = await Channel.findOne({ username: username });
		if(!channel) return bot.answerCallbackQuery(query.id, "–û—à–∏–±–∫–∞, –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");

		await channel.remove();
		return bot.answerCallbackQuery(query.id, "–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω");
	}

	if(query.data.startsWith("postdelete")) {
		let [ action, username, post_id ] = query.data.split("-");
		if(!username) return;

		let channel = await Post.findOne({ username, post_id });
		if(!channel) return bot.answerCallbackQuery(query.id, "–û—à–∏–±–∫–∞, –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");

		await channel.remove();
		return bot.answerCallbackQuery(query.id, "–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω");
	}

	if(query.data === "withdraw") {
		if(message.user.balance < 300) {
			await bot.answerCallbackQuery(query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.", false);

			return bot.sendMessage(message.chat.id, `–í–∞—à –±–∞–ª–∞–Ω—Å: <b>${message.user.balance}‚ÇΩ</b>.
<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 300‚ÇΩ</i>`, { parse_mode: "HTML", message_id: message.message_id, chat_id: message.chat.id });
		} else {
			let channels = await Channel.find();
				channels = channels.filter((x) => x.completed.indexOf(message.user.id) !== -1);

			let results = [];
			for (let i = 0; channels.length > i; i++) {
				let res = await bot.getChatMember('@'+channels[i].username, message.user.id);
				res.username = channels[i].username;

				await results.push(res);
			}

			let otpiska = [];
			results.filter((x) => x.status === 'left').map((x) => otpiska.push('@'+x.username))

			if(otpiska.length != 0) {
				return bot.sendMessage(message.chat.id, `–û—à–∏–±–∫–∞! –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤: ${otpiska.join(', ')}\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏.`);
			}

			let callback_data = 'withdraw2';

			return bot.sendMessage(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥:', {
				chat_id: message.chat.id,
				message_id: message.message_id,
				reply_markup: {
					inline_keyboard: [
						[{ text: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data }, { text: 'Qiwi', callback_data }],
						[{ text: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏', callback_data }, { text: 'WebMoney', callback_data }],
						[{ text: '–ë–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data }, { text: 'Payeer', callback_data }]
					]
				}
			});
		}
	}

	if(query.data === "withdraw2") {
		let refs = await User.countDocuments({ ref: message.chat.id });
		let next = Math.ceil(refs / 5) * 5 === 0 ? 5 : Math.ceil(refs / 5) * 5;

		return bot.sendMessage(message.chat.id, '*–û—à–∏–±–∫–∞!* –í—ã –±—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ –º–æ—à–µ–Ω–Ω–∏–∫ –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å ' + String(refs === next ? next + 5 : next) + ' —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ' + String(refs), {
			parse_mode: 'Markdown',
			message_id: message.message_id,
			chat_id: message.chat.id
		});
	}

	if(query.data === "reklam") {
		return bot.sendMessage(message.chat.id, `üôÄ –í–Ω–∏–º–∞–Ω–∏–µ, –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!

üçÄ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç 50.000‚ÇΩ –≤ –º–µ—Å—è—Ü!

üéÅ –°—Å—ã–ª–∫–∞: https://telegram.me/KingCashBot?start=${message.user.id}`);
	}

	if(query.data === "getBonus") {
		await message.user.inc('balance', 10);
	}
});

User.prototype.inc = function(field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function(field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function(field, value) {
	this[field] = value;
	return this.save();
}